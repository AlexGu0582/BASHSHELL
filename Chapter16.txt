Script Control

Signaling the bash Shell

Signal  Value       Description
1       SIGHUP      Hangs up the process
2       SIGINT      Interrupts the process 
3       SIGQUIT     Stop the process 
9       SIGKILL     Unconditionally terminates the process 
15      SIGTERM     Terminates the process if possible
17      SIGSTOP     Unconditionally stops, but does not terminate, the process
18      SIGTSTP     Stops or pauses the process, but does not terminate 
19      SIGCONT     Continutes a stopped process 



The "Ctrl+C" key combination send a SIGINT signal.

The "Ctrl+Z" key combination send a SIGTSTP signal.


Trapping signals
trap commands signals 

test1.Sh 
#!/bin/bash 
#Testing signal trapping 
#
trap "echo ' Sorry, I have trapped Ctrl+C'" SIGINT 
#
echo "This is a test script"
#
count=1
while [ $count -le 10 ]
do 
    echo "Loop #$count"
    sleep 1
    count=$[ $count + 1 ]
done 
#
echo "This is the end of the test script."
#


Removing a trap 
test3b.sh 
#!/bin/bash 
#Removing a set trap 
#
trap "echo '  Sorry... Ctrl+C is trapped.'" SIGINT 
#
count=1
while [ $count -le 5 ]
do 
    echo "Loop $count"
    sleep 1
    count=$[ $count + 1 ]
done 
#
#Removing the trap 
trap -- SIGINT 
echo "I just removed the trap."
#
count=1
while [ $count + 1 ]
do 
    echo "Second Loop #$count"
    sleep 1
    count=$[ $count + 1 ]
done 
#


Running in the background
#When you place the ampersand symbol (&) after a command, it seperates the command from the bash shell and runs it as a separate background process on the system.
$./filename.sh &
[1] 3231
#The number in the square brackets is the job number assigned by the bash shell to the background process.


Viewing jobs

$jobs
[1]+ Stopped ./test10.sh
[2]- Running ./test10.sh > test10.out &

The "jobs" Command Parameters
Parameter   Description 
-l          Lists the PID of the process along with the job number 
-r          Lists only the running jobs
-s          Lists only stopped jobs 

$ jobs -l
[1] 1950 Running ./test10.sh > test10a.out &
[2]- 1952 Running ./test10.sh > test10b.out &
[3]+ 1955 Running ./test10.sh > test10c.out &
#"+" means the last one that was added to jobs list 
#"-" means the one next to the last one that was added to jobs list 


Restarting stopped jobs 
$bg 
[1]+ ./test11.sh &

$bg 2
[2]+ ./test12.sh &


Scheduling a job using the at command 
at -M [ -f filename ] time 
#-f option tells what script file to use and the now time designation directs "at" to run the scroipt immediately.
#-M option to suppress any output generated by jobs 

$ at -M -f test13b.sh tomorrow
job 18 at 2015-07-15 13:03


Removing jobs 

atrm number 


Scheduling regular scripts
corn 

The format for the cron table is :
min hour dayofmonth month dayofweek command 



#This checks every day at 12 noon to see if it's the last day of the month, and if so, cron runs the command.
00 12 * * * if [ `date +%d -d tomorrow` = 01 ] ; then ; command ; fi 

To list an existing cron table, use the -l parameter:
$crontab -l 

