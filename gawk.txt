gawk options program file

#Reading the program script from the command line
$gawk '{print "Hello World!"}'

#Using data field variables. Each data field is determined in a text line by a field separation character.
    $0  represent the entire line of text
    $1  represent the first data field in the line of text 
    $2  represent the second data field in the line of text 
    $n  represent the nth data field in the line of text 

$ cat data2.txt
One line of test text.
Two lines of test text.
Three lines of test text.
$
$gawk '{print $1}' data2.txt
One
Two
Three 

# -F fs     Specifies a file separator for delineating data fields in a line
$gawk -F: '{print $1}' /etc/passwd


#Using multiple command in the program script 
$echo "My name is Rich" | gawk '{$4="Christine"; print $0}'
My name is Christine.


#Reading the program from a file 
$cat script2.gawk 
{print $1 "'s home directory is " $6}
$
$gawk -F: -f scritpts.gawk /etc/passwd 
root's home directory is /root
bin's home directory is /bin
daemon's home directory is /sbin
adm's home directory is /var/adm
lp's home directory is /var/spool/lpd
[...]
Christine's home directory is /home/Christine
Samantha's home directory is /home/Samantha
Timothy's home directory is /home/Timothy

#same script as scritpt2.gawk
$cat scritp3.gawk 
{
    text = "'s home directory is"
    print $1 text $6
}


#Running scripts after processing data 
$cat data3.txt 
Line 1
Line 2
Line 3
$
$gawk 'BEGIN {print "The data3 file contents"}
> {print $0}
> END {print "End of File"}' data3.txt 
The data3 File Contents:
Line 1
Line 2
Line 3
End of File


$cat scripts4.gawk 
BEGIN {
    print "The latest list of users and shells"
    print " UserID \t Shell"
    print "--------\t -------"
    FS=":"
}

{
    print $1 "       \t"  $7
}

END {
    print "this concludes the listing"
}
$
$gawk -f script4.gawk /etc/passwd
The latest list of users and shells
UserID Shell
-------- -------
root     /bin/bash
bin     /sbin/nologin
daemon   /sbin/nologin
[...]
Christine /bin/bash
mysql    /bin/bash
Samantha /bin/bash
Timothy  /bin/bash
This concludes the listing


#Using address
    [address]command 
$sed '2s/dog/cat/' data1.txt 
The quick brown fox jumps over the lazy dog
The quick brown fox jumps over the lazy cat
The quick brown fox jumps over the lazy dog
The quick brown fox jumps over the lazy dog
$
$sed '2,3s/dog/cat/' data1.txt 
The quick brown fox jumps over the lazy dog
The quick brown fox jumps over the lazy cat
The quick brown fox jumps over the lazy cat
The quick brown fox jumps over the lazy dog
$
#2,$ : from 2 to the end of text 
$sed '2,$s/dog/cat/' data1.txt 
The quick brown fox jumps over the lazy dog
The quick brown fox jumps over the lazy cat
The quick brown fox jumps over the lazy cat
The quick brown fox jumps over the lazy cat


#Using text pattern filters
    /pattern/command 
$grep Samantha /etc/password
Samantha:x:502:502::/home/Samantha:/bin/bash
$
$sed -n '/Samantha/s/bash/csh/p' /etc/password
Samantha:x:502:502::/home/Samantha:/bin/csh

#Deleting lines 
    sed 'd' filename 
$cat data6.txt 
This is line number 1.
This is line number 2.
This is line number 3.
This is line number 4.
$
$sed 'd' data6.txt 
$
$sed '3d' data6.txt 
This is line number 1.
This is line number 3.
This is line number 4.

#delete a range of line using two text patterns
$sed '/1/,/3/d' data6.txt 
This is line number 4.


#Inserting and appending text 
#The insert command (i) add a new line before the specified line.
#The append command (a) add a new line after the specified line. 
#The change command (c) allows you to change the contents of an entire line of text in the data stream.
    sed '[address]command\new line'
$echo "Test Line 2" | sed 'a\Test Line 1'
Test Line 2
Test Line 1
$
$sed '3i\"This is an inserted line."' data6.txt
This is line number 1.
This is line number 2.
This is an inserted line.
This is line number 3.
This is line number 4.
$
$sed '$a\"This is a new line of text"' data6.txt
This is line number 1.
This is line number 2.
This is line number 3.
This is line number 4.
This is a new line of text.
$
$
$sed '3c\This is a changed line of text.' data6.txt
This is line number 1.
This is line number 2.
This is a changed line of text.
This is line number 4.
$
$sed '/number 3/c\This is a changed line of text.' data6.txt 
This is line number 1.
This is line number 2.
This is a changed line of text.
This is line number 4.
$
#Using files with sed 
#Writing to a file 
    [address]w filename 
#sed '1,2w test.txt' data6.txt 
This is line number 1.
This is line number 2.
This is line number 3.
This is line number 4.
$
$cat test.txt
This is line number 1.
This is line number 2.

$ cat data11.txt
Blum, R Browncoat
McGuiness, A Alliance
Bresnahan, C Browncoat
Harken, C Alliance
$
$sed -n '/Browncoat/w Browncoats.txt' data11.txt
$
$ cat Browncoats.txt
Blum, R Browncoat
Bresnahan, C Browncoat

#Reading data from a filename 
    [address]r filename 
$cat data12.txt 
This is an added line.
This is the second added line.
$
$sed '3r data12.txt' data6.txt 
This is line number 1.
This is line number 2.
This is line number 3.
This is an added line.
This is the second added line.
This is line number 4.
$
$


#Character Class
    #[]: define a class character that would match a position in a text pattern. 
$
$sed -n '/[ch]at/p' data6
The cat is sleeping.
That is a very nice hat.
$
$echo "Yes" | sed -n '/[Yy][][]/'















